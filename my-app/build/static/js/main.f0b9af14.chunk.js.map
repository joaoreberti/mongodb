{"version":3,"sources":["components/NewHero.tsx","components/Item.tsx","components/List.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NewHero","props","useState","name","useName","setUseName","power","usePowers","setUsePowers","handleChange","e","target","value","style","display","flexDirection","width","onChange","onClick","edit","fetch","window","location","pathname","method","headers","body","JSON","stringify","formerName","formerPowers","editHero","addHero","powers","then","Item","useEdit","setEdit","useEffect","index","hero","superpower","console","log","delete","List","heroObject","setHeroObject","refresh","setRefresh","handleRemove","newHeroObject","filter","handleEdit","result","json","data","map","key","push","App","className","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f0b9af14.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\n\nconst NewHero = (props) => {\n    const [useName, setUseName] = useState(props? props.name : \"\")\n    const [usePowers, setUsePowers] = useState(props ? props.power : \"\")\n\n    const handleChange = (e) => {\n        if(e.target.name===\"name\"){\n            setUseName(e.target.value)\n            \n        }else{\n            setUsePowers(e.target.value)\n\n        }\n\n    }\n    \n    const addHero = () =>{\n        props.addHero(useName, usePowers)\n        fetch(window.location.pathname+'add', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n            body: JSON.stringify({name :useName, powers: usePowers })\n\n        },\n        ).then(() =>{\n            \n            setUsePowers('')\n            setUseName('')\n        })\n    \n        \n        \n    }\n\n    const editHero = () => {\n        fetch(window.location.pathname+'update/'+useName, {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n            body: JSON.stringify({formerName :props.name, formerPowers: props.power, name:useName, power:usePowers })\n\n        },\n        )\n        props.editHero(useName, usePowers)\n\n    }\n\n    return(\n    <div style={{display:\"flex\" , flexDirection:\"column\", width: '200px'}}>\n        <input value={useName} name = \"name\" onChange={handleChange}/> Super Hero Name\n        <input value={usePowers} name= \"superpower\" onChange={handleChange}/> SuperPowers\n        <button onClick={props.edit ? editHero : addHero} > Add</button>\n    </div>)\n}\n\nexport default NewHero","import React, {useState, useEffect} from \"react\"\nimport NewHero from \"./NewHero\"\n\n\nconst Item = (props: {delete: React.ReactNode, hero: { name: React.ReactNode; superpower: React.ReactNode } }) => {\n\n    const [useEdit, setEdit] = useState(false)\n\n\nconst handleRemove = () => {\n    console.log(props.hero.name);\n    fetch(window.location.pathname+'delete/'+props.hero.name, {\n        method: 'DELETE',\n    }).then(()=> {\n        console.log('joao');\n        \n        props.delete(props.hero.name)})\n    \n    \n}\nconst handleEdit = () => {\n    setEdit(true)\n    \n}\n\nconst handleEditHero = (name, power) => {\n    props.editHero(name, power, props.index)\n    setEdit(false)\n\n    \n}\n\n  useEffect(() => {\n      \n      return () => {\n      }\n  }, [setEdit])\n\n    return(\n        <>\n        {useEdit ? \n        <NewHero editHero = {handleEditHero} edit = {true} name={props.hero.name} power={props.hero.superpower}/>\n        : \n        \n        <div><h1>{props.hero.name}</h1>\n        <h2>{props.hero.superpower}</h2></div>}\n        \n        <button onClick={handleRemove}> remove</button>\n        <button onClick={handleEdit}>Edit</button>\n        </>\n    )\n}\n\nexport default Item","import React, {useState, useEffect} from \"react\"\nimport Item from \"./Item\"\nimport NewHero from \"./NewHero\"\nconst List = () =>{\n    const [heroObject, setHeroObject] = useState([])\n    let [refresh, setRefresh ] = useState(false)\n    \n    const handleRemove = (name) => {\n        console.log(name);\n        console.log(heroObject);\n        let newHeroObject = [...heroObject]\n        \n        newHeroObject.filter((hero, index)=>{\n            if( hero.name !== name){\n                return \n            }\n        })\n        setRefresh(true)\n\n        setHeroObject(newHeroObject)\n\n        \n        \n    }\n    const handleAdd = (name, superpower)=>{\n        let newHeroObject = [...heroObject]\n        newHeroObject.push({name: name, superpower: superpower})\n        setHeroObject(newHeroObject)\n        setRefresh(true)\n\n    }\n\n    const handleEdit = (name, superpower, index) => {\n\n        let newHeroObject = [...heroObject]\n        newHeroObject[index].name = name\n        newHeroObject[index].superpower = superpower\n\n        setHeroObject(newHeroObject)\n\n        \n        \n    }\n    \n    useEffect(() => {\n        console.log('mount')\n        fetch(window.location.pathname+'list')\n    .then(result => result.json())\n    .then(data => setHeroObject(data));\n        return () => {\n            console.log('unmount')\n\n        }\n    }, [refresh])\n\n    return(\n        <ul>\n            {heroObject.map((hero, index) => <Item editHero = {handleEdit} delete={handleRemove} hero = {hero} index={index} key ={index} />)}\n            <NewHero  addHero ={handleAdd} />\n        </ul>\n    )\n}\n\nexport default List","import React from 'react';\nimport List from \"./components/List\"\nimport './App.css';\n\nconst  App = () => {\n\n\n\n  return (\n    <div className=\"App\">\n     <List />\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}